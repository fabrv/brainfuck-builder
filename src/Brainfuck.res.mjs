// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function bfInt(val) {
  if (val < 128) {
    return "+".repeat(val % 256);
  } else {
    return "-".repeat((256 - val | 0) % 256);
  }
}

function toCharCodes(val) {
  return val.split("").map(function ($$char) {
              return $$char.charCodeAt(0) | 0;
            });
}

function repeat(prim0, prim1) {
  return prim0.repeat(prim1);
}

function operation(op) {
  return function (val) {
    return op.repeat(val);
  };
}

function forward(val) {
  return ">".repeat(val);
}

function backward(val) {
  return "<".repeat(val);
}

function increment(val) {
  return "+".repeat(val);
}

function decrement(val) {
  return "-".repeat(val);
}

var bracketLeft = "[";

var bracketRight = "]";

var clearCell = "[-]";

function toCell(value) {
  return forward(17 + value | 0);
}

function fromCell(value) {
  return backward(17 + value | 0);
}

function loadSource(staticSize) {
  return forward(32 + staticSize | 0) + ">>,[>,]<[<]<" + backward(32 + staticSize | 0);
}

function toStack(staticSize) {
  return forward(32 + staticSize | 0) + ">>[>]";
}

function fromStack(staticSize) {
  return "<[<]<" + backward(32 + staticSize | 0);
}

var cellToBinary = "<[-]>[<+>[-]]<[->+<]>";

function buildStaticData(regions) {
  var totalSize = Core__Array.reduce(regions, 0, (function (acc, param) {
          return acc + param[1].length | 0;
        }));
  var locations = Core__Array.reduceWithIndex(regions, [], (function (acc, param, index) {
          var $$location = (Core__Option.getOr(acc[index], 0) + param[1].length | 0) + 1 | 0;
          return Belt_Array.concatMany([
                      acc,
                      [$$location]
                    ]);
        }));
  var data = Object.fromEntries(regions.map(function (param, index) {
            var $$location = Core__Option.getOr(locations[index - 1 | 0], 0);
            var dataValue_size = param[1].length;
            var dataValue = {
              location: $$location,
              size: dataValue_size
            };
            return [
                    param[0],
                    dataValue
                  ];
          }));
  var brainfuck = regions.map(function (param) {
          return param[1].map(bfInt).join(">");
        }).join(">");
  return [
          data,
          forward(32) + brainfuck + backward(31 + totalSize | 0),
          totalSize
        ];
}

function mov(operand, register) {
  if (operand.TAG !== "Register") {
    return [
              forward(3),
              forward(3).repeat(register),
              clearCell,
              bfInt(operand._0),
              backward(3).repeat(register),
              backward(3)
            ].join("");
  }
  var opReg = operand._0;
  return [
            forward(3),
            forward(3).repeat(register),
            clearCell,
            backward(3).repeat(register),
            forward(3).repeat(opReg),
            bracketLeft,
            backward(1),
            increment(1),
            backward(3).repeat(opReg),
            forward(1),
            forward(3).repeat(register),
            increment(1),
            backward(3).repeat(register),
            forward(3).repeat(opReg),
            decrement(1),
            bracketRight,
            backward(1),
            bracketLeft,
            forward(1),
            increment(1),
            backward(1),
            decrement(1),
            bracketRight,
            backward(3).repeat(opReg),
            backward(2)
          ].join("");
}

function add(operand) {
  if (operand.TAG !== "Register") {
    return [
              forward(3),
              "+".repeat(operand._0),
              backward(3)
            ].join("");
  }
  var opReg = operand._0;
  return [
            forward(3),
            forward(3).repeat(opReg),
            bracketLeft,
            backward(1),
            increment(1),
            backward(3).repeat(opReg),
            forward(1),
            increment(1),
            forward(3).repeat(opReg),
            decrement(1),
            bracketRight,
            backward(1),
            bracketLeft,
            forward(1),
            increment(1),
            backward(1),
            decrement(1),
            bracketRight,
            backward(3).repeat(opReg),
            backward(2)
          ].join("");
}

function sub(operand) {
  if (operand.TAG !== "Register") {
    return [
              forward(3),
              "-".repeat(operand._0),
              backward(3)
            ].join("");
  }
  var opReg = operand._0;
  return [
            forward(3),
            forward(3).repeat(opReg),
            bracketLeft,
            backward(1),
            increment(1),
            backward(3).repeat(opReg),
            forward(1),
            decrement(1),
            forward(3).repeat(opReg),
            decrement(1),
            bracketRight,
            backward(1),
            bracketLeft,
            forward(1),
            increment(1),
            backward(1),
            decrement(1),
            bracketRight,
            backward(3).repeat(opReg),
            backward(2)
          ].join("");
}

function mul(operand) {
  if (operand.TAG !== "Register") {
    return [
              forward(2),
              clearCell,
              forward(1),
              bracketLeft,
              backward(1),
              increment(1),
              forward(1),
              decrement(1),
              bracketRight,
              backward(1),
              bracketLeft,
              forward(1),
              increment(operand._0),
              backward(1),
              decrement(1),
              bracketRight,
              backward(2)
            ].join("");
  }
  var opReg = operand._0;
  return [
            forward(2),
            clearCell,
            forward(3).repeat(opReg),
            clearCell,
            backward(3).repeat(opReg),
            forward(1),
            bracketLeft,
            forward(3).repeat(opReg),
            backward(1),
            increment(1),
            backward(3).repeat(opReg),
            forward(1),
            decrement(1),
            bracketRight,
            forward(3).repeat(opReg),
            backward(1),
            bracketLeft,
            forward(1),
            bracketLeft,
            backward(3).repeat(opReg),
            increment(1),
            backward(1),
            increment(1),
            forward(3).repeat(opReg),
            forward(1),
            decrement(1),
            bracketRight,
            backward(3).repeat(opReg),
            backward(1),
            bracketLeft,
            forward(3).repeat(opReg),
            forward(1),
            increment(1),
            backward(3).repeat(opReg),
            backward(1),
            decrement(1),
            bracketRight,
            forward(3).repeat(opReg),
            decrement(1),
            bracketRight,
            backward(3).repeat(opReg),
            backward(2)
          ].join("");
}

function _and(operand) {
  if (operand.TAG !== "Register") {
    return [
              forward(3),
              operand._0 === 0 ? "[-]" : cellToBinary,
              backward(3)
            ].join("");
  }
  var opReg = operand._0;
  return [
            toCell(0),
            clearCell,
            forward(1),
            clearCell,
            fromCell(1),
            forward(3).repeat(opReg),
            forward(3),
            bracketLeft,
            backward(3).repeat(opReg),
            backward(3),
            toCell(0),
            increment(1),
            forward(1),
            increment(1),
            fromCell(1),
            forward(3).repeat(opReg),
            forward(3),
            decrement(1),
            bracketRight,
            backward(3).repeat(opReg),
            backward(3),
            toCell(1),
            bracketLeft,
            fromCell(1),
            forward(3).repeat(opReg),
            forward(3),
            increment(1),
            backward(3).repeat(opReg),
            backward(3),
            toCell(1),
            decrement(1),
            bracketRight,
            fromCell(1),
            forward(3),
            cellToBinary,
            forward(3).repeat(opReg),
            cellToBinary,
            backward(4),
            clearCell,
            forward(1),
            bracketLeft,
            forward(3).repeat(opReg),
            bracketLeft,
            backward(3).repeat(opReg),
            backward(1),
            increment(1),
            forward(1),
            forward(3).repeat(opReg),
            decrement(1),
            bracketRight,
            backward(3).repeat(opReg),
            decrement(1),
            bracketRight,
            forward(3).repeat(opReg),
            clearCell,
            backward(3).repeat(opReg),
            backward(3),
            toCell(0),
            bracketLeft,
            fromCell(0),
            forward(3).repeat(opReg),
            forward(3),
            increment(1),
            backward(3).repeat(opReg),
            backward(3),
            toCell(0),
            decrement(1),
            bracketRight,
            fromCell(0),
            ">>[>+<-]<<"
          ].join("");
}

function push(value, staticSizeOpt) {
  var staticSize = staticSizeOpt !== undefined ? staticSizeOpt : 0;
  return [
            toStack(staticSize),
            ">>[>>]+>",
            bfInt(value),
            "<[<<]",
            fromStack(staticSize)
          ].join("");
}

function pop(register, staticSizeOpt) {
  var staticSize = staticSizeOpt !== undefined ? staticSizeOpt : 0;
  return [
            forward(3),
            forward(3).repeat(register),
            clearCell,
            backward(3),
            backward(3).repeat(register),
            toStack(staticSize),
            ">>[>>]<",
            bracketLeft,
            "<[<<]",
            fromStack(staticSize),
            forward(3),
            forward(3).repeat(register),
            increment(1),
            backward(3),
            backward(3).repeat(register),
            toStack(staticSize),
            ">>[>>]<",
            decrement(1),
            bracketRight,
            "<-<<[<<]",
            fromStack(staticSize)
          ].join("");
}

var print = ".";

var input = ",";

export {
  bfInt ,
  toCharCodes ,
  repeat ,
  operation ,
  forward ,
  backward ,
  increment ,
  decrement ,
  print ,
  input ,
  bracketLeft ,
  bracketRight ,
  clearCell ,
  toCell ,
  fromCell ,
  loadSource ,
  toStack ,
  fromStack ,
  cellToBinary ,
  buildStaticData ,
  mov ,
  add ,
  sub ,
  mul ,
  _and ,
  push ,
  pop ,
}
/* No side effect */
